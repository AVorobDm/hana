/*!
@file
Defines `boost::hana::Applicative`.

@copyright Louis Dionne 2015
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_APPLICATIVE_HPP
#define BOOST_HANA_APPLICATIVE_HPP

#include <boost/hana/fwd/applicative.hpp>

#include <boost/hana/bool.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/datatype.hpp>
#include <boost/hana/core/default.hpp>
#include <boost/hana/core/models.hpp>
#include <boost/hana/core/when.hpp>
#include <boost/hana/detail/variadic/foldl1.hpp>
#include <boost/hana/functional/curry.hpp>
#include <boost/hana/functor.hpp>


namespace boost { namespace hana {
    //////////////////////////////////////////////////////////////////////////
    // ap
    //////////////////////////////////////////////////////////////////////////
    template <typename A, typename>
    struct ap_impl : ap_impl<A, when<true>> { };

    template <typename A, bool condition>
    struct ap_impl<A, when<condition>> : default_ {
        static void apply(...);
    };

    // Remove warnings generated by poor confused Doxygen
    //! @cond
    template <typename F, typename X>
    constexpr decltype(auto) _ap::operator()(F&& f, X&& x) const {
#ifdef BOOST_HANA_CONFIG_CHECK_DATA_TYPES
        static_assert(_models<Applicative, typename datatype<F>::type>{},
        "hana::ap(f, x) requires f to be an Applicative");

        static_assert(_models<Applicative, typename datatype<X>::type>{},
        "hana::ap(f, x) requires x to be an Applicative");
#endif
        return ap_impl<typename datatype<F>::type>::apply(
            static_cast<F&&>(f), static_cast<X&&>(x)
        );
    }

    template <typename F, typename ...Xs>
    constexpr decltype(auto) _ap::operator()(F&& f, Xs&& ...xs) const {
        static_assert(sizeof...(xs) >= 1,
        "hana::ap must be called with at least two arguments");

        return detail::variadic::foldl1(
            *this,
            hana::transform(static_cast<F&&>(f), curry<sizeof...(xs)>),
            static_cast<Xs&&>(xs)...
        );
    }
    //! @endcond

    //////////////////////////////////////////////////////////////////////////
    // lift
    //////////////////////////////////////////////////////////////////////////
    template <typename A, typename>
    struct lift_impl : lift_impl<A, when<true>> { };

    template <typename A, bool condition>
    struct lift_impl<A, when<condition>> : default_ {
        static void apply(...);
    };

    //////////////////////////////////////////////////////////////////////////
    // Applicative::transform_impl
    //////////////////////////////////////////////////////////////////////////
    template <typename A>
    struct Applicative::transform_impl {
        template <typename X, typename F>
        static constexpr decltype(auto) apply(X&& x, F&& f) {
            return hana::ap(lift<A>(static_cast<F&&>(f)),
                            static_cast<X&&>(x));
        }
    };

    //////////////////////////////////////////////////////////////////////////
    // models
    //////////////////////////////////////////////////////////////////////////
    template <typename A>
    struct models_impl<Applicative, A>
        : _integral_constant<bool,
            !is_default<ap_impl<A>>{} &&
            !is_default<lift_impl<A>>{}
        >
    { };
}} // end namespace boost::hana

#endif // !BOOST_HANA_APPLICATIVE_HPP
